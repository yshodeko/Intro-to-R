#myxe
for(i in seq(myxe)){
myxe[i] <- mean(as.numeric(character_removal[i,]))
}
myxe[1:8]
myxe
mygene <- c(exercise[,-2:-19], myxe)
View(mygene)
# Load required libraries
library(dplyr)
# Assuming your data is stored in a data frame named my_data
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
exercise <- read.csv("GSE71562.CSV")
head(exercise)
View(exercise)
character_removal <- exercise[,-1]
#View(character_removal)
myxe <- numeric(length(character_removal[,1]))
#myxe
for(i in seq(myxe)){
myxe[i] <- mean(as.numeric(character_removal[i,]))
}
myxe[1:8]
myxe
mygene <- c(exercise[,-2:-19], myxe)
View(mygene)
# Load required libraries
library(dplyr)
# Assuming your data is stored in a data frame named my_data
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values[above_threshold])
# Print the result
cat("\nProblem 2:\n")
cat("Variables with averages above 2 standard deviations:\n")
for (name in names_above_threshold) {
cat("Variable:", name, "\tAverage:", avg_values[name], "\n")
}
cat[,]
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values[above_threshold])
# Print the result
cat("\nProblem 2:\n")
cat("Variables with averages above 2 standard deviations:\n")
for (name in names_above_threshold) {
cat("Variable:", name, "\tAverage:", avg_values[name], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Assuming your data is stored in a data frame named exercise
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values[above_threshold])
# Print the result
cat("\nProblem 2:\n")
cat("Variables with averages above 2 standard deviations:\n")
for (name in names_above_threshold) {
cat("Variable:", name, "\tAverage:", avg_values[name], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values[above_threshold])
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (i in above_threshold) {
cat("Gene number:", i, "\tName:", names_above_threshold[i], "\tAverage:", avg_values[names_above_threshold[i]], "\n")
}
# Load required libraries
library(dplyr)
# Assuming your data is stored in a data frame named my_data
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values[above_threshold])
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (i in above_threshold) {
cat("Gene number:", i, "\tName:", names_above_threshold[i], "\tAverage:", avg_values[names_above_threshold[i]], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- names(avg_values)[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (i in above_threshold) {
cat("Gene number:", i, "\tName:", names_above_threshold[i], "\tAverage:", avg_values[names_above_threshold[i]], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print variable names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(where(is.numeric)),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
names_above_threshold <- row.names(exercise)[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (name in names_above_threshold) {
cat("Gene name:", name, "\tAverage:", avg_values[name], "\n")
# Problem 2: Print gene names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(-Gene),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
genes_above_threshold <- exercise$Gene[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (gene in genes_above_threshold) {
cat("Gene name:", gene, "\tAverage:", avg_values[match(gene, exercise$Gene)], "\n")
}
# Load required libraries
library(dplyr)
# Create a sample data frame
exercise <- data.frame(
Gene = c("aaeA", "aaeB", "aaeR", "aaeX", "aas", "aat"),
E14R012a01 = c(100, 116, 316, 77, 407, 243),
E14R012a02 = c(56, 47, 253, 53, 286, 169),
E14R012a03 = c(44, 54, 249, 53, 283, 163),
E14R012a04 = c(94, 80, 396, 86, 375, 252),
E14R012a05 = c(32, 37, 181, 46, 188, 104)
)
# Problem 2: Print gene names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(-Gene),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
genes_above_threshold <- exercise$Gene[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (gene in genes_above_threshold) {
cat("Gene name:", gene, "\tAverage:", avg_values[match(gene, exercise$Gene)], "\n")
}
# Load required libraries
library(dplyr)
# Create a sample data frame
exercise <- data.frame(
Gene = c("aaeA", "aaeB", "aaeR", "aaeX", "aas", "aat"),
E14R012a01 = c(100, 116, 316, 77, 407, 243),
E14R012a02 = c(56, 47, 253, 53, 286, 169),
E14R012a03 = c(44, 54, 249, 53, 283, 163),
E14R012a04 = c(94, 80, 396, 86, 375, 252),
E14R012a05 = c(32, 37, 181, 46, 188, 104)
)
# Problem 2: Print gene names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(-Gene),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
genes_above_threshold <- exercise$Gene[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (gene in genes_above_threshold) {
cat("Gene name:", gene, "\tAverage:", avg_values[match(gene, exercise$Gene)], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print gene names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(-Gene),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
genes_above_threshold <- exercise$Gene[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (gene in genes_above_threshold) {
cat("Gene name:", gene, "\tAverage:", avg_values[match(gene, exercise$Gene)], "\n")
}
# Problem 1: Calculate average of 18 numeric variables and find the name of the highest average
averages <- exercise %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
max_avg <- which.max(averages)
name_of_max_avg <- names(averages)[max_avg]
# Print the result
cat("Problem 1:\n")
cat("Variable with the highest average:", name_of_max_avg, "\n")
# Problem 2: Print gene names and numbers that are 2 standard deviations above the averages
avg_values <- rowMeans(exercise %>%
select(-Gene),
na.rm = TRUE)
std_dev <- sd(avg_values, na.rm = TRUE)
threshold <- mean(avg_values, na.rm = TRUE) + 2 * std_dev
above_threshold <- which(avg_values > threshold)
genes_above_threshold <- exercise$Gene[above_threshold]
# Print the result
cat("\nProblem 2:\n")
cat("Genes with averages above 2 standard deviations:\n")
for (gene in genes_above_threshold) {
cat("Gene name:", gene, "\tAverage:", avg_values[match(gene, exercise$Gene)], "\n")
}
library(help="graphics")
parkinfo <- read.csv("NationalParkInfo.csv", header=TRUE, sep=",")
str(parkinfo)
parkinfo <- read.csv("NationalParkInfo.csv", header=TRUE, sep=",")
str(parkinfo)
View(parkinfo)
head(parkinfo, n=3)
tail(parkinfo, n=3)
summary(parkinfo)
# load the data set in R
parkinfo <- read.csv("NationalParkInfo.csv", header=TRUE, sep=",")
# Explore the newly built object a little bit and check if its in your desired format
str(parkinfo)
#View(parkinfo)
head(parkinfo, n=3)
tail(parkinfo, n=3)
summary(parkinfo)
# Plot a basic scatter plot
plot(parkinfo)
# Now, to study the relationship between the wildlife_count and park_staff_count.
plot(parkinfo$Wildlife_Count, parkinfo$Park_Staff_Count)
plot(parkinfo)
# Now, to study the relationship between the wildlife_count and park_staff_count.
plot(parkinfo$Wildlife_Count, parkinfo$Park_Staff_Count) # The plot shows mostly a positive correlation.
# Using arguments with the plot() function
# We can easily style our charts by using different arguments of the plot() function. One of them is the type argument.
# type argument:
# The plot function has the type argument that takes in values like p: points, l: lines, b: points & lines, h: high-density vertical lines. This decides the output graph shape.
plot(parkinfo$Wildlife_Count, type="b")
# We can also label the X and the Y axis and give a title and color to the plot.
plot(parkinfo$Wildlife_Count, xlab = 'Parks', ylab = 'Wildlife Count', main = 'Wildlife Count in National Parks around the World', col = 'blue')
# We can also label the X and the Y axis and give a title and color to the plot.
plot(parkinfo$Wildlife_Count, xlab = 'Parks', ylab = 'Wildlife Count', main = 'Wildlife Count in National Parks around the World', col = 'blue', type='b')
# In a bar plot, data is represented in the form of rectangular bars
# and the length of the bar is proportional to the value of the variable or column in the dataset.
# Both horizontal, as well as a vertical bar chart, can be generated by tweaking the horiz parameter.
# Horizontal bar plot
barplot(parkinfo$Wildlife_Count, main = 'Wildlife Count in National Parks around the World',xlab = 'Wildlife Count', col= 'green',horiz = TRUE)
# A histogram is similar to a bar chart except that it groups values into continuous ranges.
# It represents frequencies of values of a variable bucketed into ranges.
hist(parkinfo$Entry_Fee,main = 'Entry Fee for National Parks',xlab = 'Entry Fee', col='red')
# Boxplot is graphical representation of the summary() command in the form of quartiles.
# Single box plot
boxplot(parkinfo$Entry_Fee)
# Multiple box plots
boxplot(parkinfo[,3], parkinfo[,4], parkinfo[,6], parkinfo[,7], main='Multiple Box plots')
boxplot(parkinfo[,c(3,4,6,7)], main= 'Multiple Box plots')
# Grid of Charts
# This is a very useful feature in R with which we can plot multiple charts at once.
# You can plot different types of graphs at once and then pick and choose which one explains your data more informatively.
# For drawing a grid, the first argument should specify certain attributes
# like the margin of the grid(mar),
# no of rows and columns(mfrow),
# whether a border is to be included(bty)
# and position of the labels(las: 1 for horizontal, las: 0 for vertical).
par(mfrow=c(3,3), mar=c(2,5,2,1), las=1, bty="n")
plot(parkinfo$Entry_Fee)
plot(parkinfo$Entry_Fee, parkinfo$Visitor_Each_Year)
plot(parkinfo$Wildlife_Count, type="c")
plot(parkinfo$Park_Staff_Count, type="h")
plot(parkinfo$Visitor_Each_Year, type="s")
barplot(parkinfo$Entry_Fee, main = 'Entry Fee in National Parks',xlab = 'Entry Fee', col='green',horiz = TRUE)
hist(parkinfo$Park_Staff_Count)
boxplot(parkinfo[,c(3,6)], main='Multiple Box plots')
library(ggplot2)
# ggplot2
library(ggplot2)
# Loading the dataset
attach(parkinfo)
# Scatterplots using ggplot2
ggplot(data = parkinfo, mapping = aes(x = Wildlife_Count, y = Park_Staff_Count)) + geom_point()
# Styling scatter plots by factor
ggplot(data = parkinfo, mapping = aes(x = Wildlife_Count, y = Park_Staff_Count, color = as.factor(Park_Country))) + geom_point()
# Styling scatter plots by size
ggplot(data = parkinfo, mapping = aes(x = Wildlife_Count, y = Park_Staff_Count, size = Visitor_Each_Year, color = as.factor(Park_Country))) + geom_point()
# Styling scatter plots by size
ggplot(data = parkinfo, mapping = aes(x = Wildlife_Count, y = Park_Staff_Count, size = Visitor_Each_Year)) + geom_point()
# Different symbols for different sizes
p <- ggplot(parkinfo,aes(Wildlife_Count, Park_Staff_Count, shape = factor(Park_Country)))
p + geom_point(aes(colour = factor(Park_Country)), size = 4) + geom_point(colour = "grey90", size = 1.5)
# Heatmaps using ggplot2
# For a basic heatmap, we will use the geom_tile() function of ggplot2.
# Here, the input data must be a long format
# (check this link for further explanation on long and wide formats along with the conversion details:
# http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/)
# where each row provides an observation. At least 3 variables are needed per observation:
# x: position on the X axis
# ​	y: position on the Y axis
# ​	fill: the numeric value that will be translated in a color
# Let's try:
# dummy data
x <- LETTERS[1:20]
y <- paste0("var", seq(1,20))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
# Heatmap
ggplot(data, aes(X, Y, fill= Z)) + geom_tile()
library(tidyverse)
library(ggplot2)
dat <- read.csv("EconomistData.csv")
View(dat)
# 1 Create a scatter plot with CPI on the x axis and HDI on the y axis.
ggplot(dat,aes(CPI, HDI))+
geom_point()
# 1 Create a scatter plot with CPI on the x axis and HDI on the y axis.
ggplot(dat,aes(CPI, HDI))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color="blue"))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color="Blue"))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color="RED"))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color="red"))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color="green"))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color=green))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI, color=""))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI), color="blue")+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI), color="purple")+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
ggplot(dat,aes(CPI, HDI))+
geom_point(color="purple")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
lib
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat,aes(CPI, HDI))+
geom_point(color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
ggplot(dat)+
geom_point(aes(CPI, HDI),color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
ggplot(dat)+
geom_point(aes(CPI, HDI,color="blue"))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat)+
geom_point(aes(CPI, HDI),color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
ggplot(dat ,color="blue")+
geom_point(aes(CPI, HDI),color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat ,color="blue")+
geom_point(aes(CPI, HDI),color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.",color="blue")
# 3 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points according to Region.
ggplot(dat)+
geom_point(aes(CPI, HDI),color= Region)+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 3 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points according to Region.
ggplot(dat)+
geom_point(aes(CPI, HDI,color= Region))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 4 Create a scatter plot with CPI on the x axis and HDI on the y axis and set point size to 2 so that the points bigger than in other plots.
ggplot(dat)+
geom_point(aes(CPI, HDI,size = 2))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 5 Create a scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank.
ggplot(dat)+
geom_point(aes(CPI, HDI,size = "HDI.Rank"))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank")
# 5 Create a scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank.
ggplot(dat)+
geom_point(aes(CPI, HDI,size = HDI.Rank))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank")
# 1 Create a scatter plot with CPI on the x axis and HDI on the y axis.
ggplot(dat,aes(CPI, HDI))+
geom_point()+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis.")
# 2 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points blue.
ggplot(dat)+
geom_point(aes(CPI, HDI),color="blue")+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and color the points blue..")
# 3 Create a scatter plot with CPI on the x axis and HDI on the y axis and color the points according to Region.
ggplot(dat)+
geom_point(aes(CPI, HDI,color= Region))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and color the points according to Region.")
# 4 Create a scatter plot with CPI on the x axis and HDI on the y axis and set point size to 2 so that the points bigger than in other plots.
ggplot(dat)+
geom_point(aes(CPI, HDI,size = 2))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and set point size to 2.")
# 5 Create a scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank.
ggplot(dat)+
geom_point(aes(CPI, HDI,size = HDI.Rank))+
labs(title="scatter plot with CPI on the x axis and HDI on the y axis and map the size of the points to HDI.Rank")
dim(dat)
knitr::opts_chunk$set(echo = TRUE)
